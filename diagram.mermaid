graph TD
    subgraph System Initialization
        A[Start ConcurQueue Application] --> B(Initialize Queues: taskQueue, retryQueue);
        B --> C(Initialize ConcurrentHashMap: taskStatusMap);
        C --> D(Initialize Worker Thread Pool: workerPool);
        D --> E(Initialize Monitor Thread Pool);
        E --> F(Setup Shutdown Hook);
    end

subgraph Producers
P1(Producer 1) -- Generates Tasks --> G[Task created (status: SUBMITTED)];
P2(Producer 2) -- Generates Tasks --> G;
P3(Producer 3) -- Generates Tasks --> G;
G --> H{Add Task to taskQueue};
H --> I[taskStatusMap updated: TaskId -> SUBMITTED];
I --> J(Producer sleeps for interval);
J --> P1;
J --> P2;
J --> P3;
end

subgraph Consumers (Worker Pool)
K[Worker Thread Available] --> L{Take Task from taskQueue};
L -- Task Available --> M[taskStatusMap updated: TaskId -> PROCESSING];
M --> N(Simulate Task Processing - Thread.sleep);
N --> O{Processing Result?};
O -- Success --> P[taskStatusMap updated: TaskId -> COMPLETED];
P --> Q(Increment processedCount);
Q --> K;

O -- Failure (max retries not reached) --> R[Increment failedCount];
R --> S{Queue for Retry?};
S -- Yes --> T[Create new Task object (retryCount++)];
T --> U[taskStatusMap updated: TaskId -> RETRYING];
U --> V{Add Task to retryQueue};
V --> K;

O -- Failure (max retries exceeded) --> W[Increment failedCount];
W --> X[taskStatusMap updated: TaskId -> FAILED];
X --> Y(Log permanent failure);
Y --> K;
end

subgraph Retry Mechanism
Z[Retry Queue Processor] --> AA{Take Task from retryQueue};
AA -- Task Available --> BB(Delay before retry);
BB --> CC{Add Task to taskQueue};
CC --> DD[taskStatusMap updated: TaskId -> SUBMITTED];
DD --> Z;
AA -- No Task (Interrupted) --> EE(Stop Retry Processor);
end

subgraph System Monitor
F1(Monitor Thread) -- Runs every 5s --> F2{Log System Status};
F2 --> F3(Get queue sizes, worker stats, task status counts);
F3 --> F4(Detect Stalled Tasks (based on PROCESSING count));
F4 --> F5(Output logs to console);
F5 --> F6{Time for JSON Export?};
F6 -- Yes (every 1 min) --> F7(Export detailed status to JSON file);
F7 --> F1;
F6 -- No --> F1;
end

subgraph Shutdown
SD1(Shutdown Hook Triggered) --> SD2(Set systemRunning to false);
SD2 --> SD3(Initiate graceful shutdown of workerPool);
SD3 --> SD4(Initiate graceful shutdown of monitorPool);
SD4 --> SD5(Attempt to drain remaining tasks from taskQueue);
SD5 --> SD6(Wait for pools to terminate);
SD6 --> SD7(Log final status);
SD7 --> SD8[Application Exits];
end

style A fill:#DDF,stroke:#333,stroke-width:2px
style F1 fill:#DDF,stroke:#333,stroke-width:2px
style K fill:#DDF,stroke:#333,stroke-width:2px
style P1 fill:#DDF,stroke:#333,stroke-width:2px
style P2 fill:#DDF,stroke:#333,stroke-width:2px
style P3 fill:#DDF,stroke:#333,stroke-width:2px
style Z fill:#DDF,stroke:#333,stroke-width:2px
style SD1 fill:#DDF,stroke:#333,stroke-width:2px